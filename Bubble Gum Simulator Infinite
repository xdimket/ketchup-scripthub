-- /////////////  INITIALIZE RAYFIELD UI  /////////////
 -- //////////// Anti AFK //////////////////////////////
 local vu = game:GetService("VirtualUser")
 game:GetService("Players").LocalPlayer.Idled:connect(function()
 vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
 wait(1)
 vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
 end)
 
 
 Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
 
 MainWindow = Rayfield:CreateWindow({
    Name = "Ketchup's Script Hub",
    LoadingTitle = "Scripts",
    LoadingSubtitle = "by ketchup",
    ConfigurationSaving = {
       Enabled = true,
       FolderName = ketchup,
       FileName = "bgsiconfig"
    },
    Discord = {
       Enabled = false,
       Invite = "noinvitelink",
       RememberJoins = true
    },
    KeySystem = false,
    KeySettings = {
       Title = "tay your banned ",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided",
       FileName = "Key",
       SaveKey = true,
       GrabKeyFromSite = false,
       Key = {"Tayban"}
    }
 })
 
 -- /////////////  CREATE TABS  /////////////
 
 local MainTab = MainWindow:CreateTab("Main", 4483362458) -- Renamed here
 local PlayerTab = MainWindow:CreateTab("Player", 4483362458)
 
 -- /////////////  GENERAL SECTION  /////////////
 
 local GeneralSection = MainTab:CreateSection("General") -- Renamed here
 
 local IYButton = MainTab:CreateButton({
    Name = "Infinite Yield",
    Callback = function()
       loadstring(game:HttpGet('https://raw.githubusercontent.com/KeanXR/INF-YIELD/refs/heads/main/v6.0.0'))()
    end,
 })
 
 -- /////////////  DEX SECTION  /////////////
 
 local DexSection = MainTab:CreateSection("Dex") -- Renamed here
 
 local DexButton = MainTab:CreateButton({
    Name = "Dex",
    Callback = function()
       loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/dex.lua"))()
    end,
 })
 
 -- /////////////  REMOTES SECTION  /////////////
 
 local RemotesSection = MainTab:CreateSection("Remotes") -- Renamed here
 
 local RSpyButton = MainTab:CreateButton({
    Name = "RSpy",
    Callback = function()
       loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/78n/SimpleSpy/main/SimpleSpyBeta.lua"))()
    end,
 })
  local SigmaSpyButton = MainTab:CreateButton({
    Name = "SigmaSpy",
    Callback = function()
       loadstring(game:HttpGet("https://raw.githubusercontent.com/depthso/Sigma-Spy/refs/heads/main/Main.lua"), "Sigma Spy")()
    end,
 })
 -- /////////////  SERVER JOINER SECTION  /////////////
 
 local ServerSection = MainTab:CreateSection("Server Joiner")
 
 -- Initialize TeleportService for server joining
 local TeleportService = game:GetService("TeleportService")
 local Players = game:GetService("Players")
 local LocalPlayer = Players.LocalPlayer
 
 -- Create input for Job ID
 local JobIDInput = MainTab:CreateInput({
    Name = "Server Job ID",
    PlaceholderText = "Enter server JobID here...",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
       -- Store the text but don't join yet
    end,
 })
 
 -- Create a button to join server by JobID
 local JoinServerButton = MainTab:CreateButton({
    Name = "Join Server",
    Callback = function()
       local jobId = JobIDInput.CurrentValue
       jobId = jobId:gsub("[\n\r]", ""):gsub("%s+", "")
       if jobId and jobId ~= "" then
          Rayfield:Notify({
             Title = "Server Joiner",
             Content = "Attempting to join server...",
             Duration = 3,
             Image = 4483362458
          })
 
          -- Get the current place ID
          local placeId = game.PlaceId
 
          -- Using pcall to handle any errors
          local success, errorMsg = pcall(function()
             TeleportService:TeleportToPlaceInstance(placeId, jobId, LocalPlayer)
          end)
 
          if not success then
             Rayfield:Notify({
                Title = "Error",
                Content = "Failed to join: " .. tostring(errorMsg),
                Duration = 5,
                Image = 4483362458
             })
          end
       else
          Rayfield:Notify({
             Title = "Error",
             Content = "Please enter a valid JobID",
             Duration = 3,
             Image = 4483362458
          })
       end
    end,
 })
 
 -- Create a button to copy current server's JobID
 local GetCurrentJobIDButton = MainTab:CreateButton({
    Name = "Copy Current JobID",
    Callback = function()
       local currentJobId = game.JobId
 
       -- Set the input field to the current JobID
       JobIDInput:Set(currentJobId)
 
       -- Notify the user
       Rayfield:Notify({
          Title = "Current JobID",
          Content = "Current JobID copied: " .. currentJobId,
          Duration = 5,
          Image = 4483362458
       })
    end,
 })
 
 -- /////////////  PLAYER TAB SECTIONS  /////////////
 
 local PlayerSection = PlayerTab:CreateSection("Player")
 
 local WalkSpeedSlider = PlayerTab:CreateSlider({
     Name = "Player WalkSpeed",
     Range = {0, 200},
     Increment = 1,
     Suffix = "WalkSpeed",
     CurrentValue = 16,
     Flag = "WalkSpeedSlider",
     Callback = function(Value)
         game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
     end,
 })
 
 local JumpPowerSlider = PlayerTab:CreateSlider({
     Name = "Player JumpPower",
     Range = {0, 300},
     Increment = 5,
     Suffix = "JumpPower",
     CurrentValue = 50,
     Flag = "JumpPowerSlider",
     Callback = function(Value)
         game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
     end,
 })
 
 local ResetButton = PlayerTab:CreateButton({
     Name = "Reset WalkSpeed & JumpPower",
     Callback = function()
         game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
         game.Players.LocalPlayer.Character.Humanoid.JumpPower = 50
         WalkSpeedSlider:Set(16)
         JumpPowerSlider:Set(50)
     end,
 })
 
 -- /////////////  FORCE WALK AND JUMP SPEED TOGGLE  /////////////
 
 local ForceWalkJump = false
 
 local ForceWalkJumpToggle = PlayerTab:CreateToggle({
     Name = "Force Walk and Jump Speed",
     CurrentValue = false,
     Flag = "ForceWalkJumpToggle",
     Callback = function(Value)
         ForceWalkJump = Value
         if ForceWalkJump then
             spawn(function()
                 while ForceWalkJump do
                     local humanoid = game.Players.LocalPlayer.Character.Humanoid
                     humanoid.WalkSpeed = WalkSpeedSlider:Get()
                     humanoid.JumpPower = JumpPowerSlider:Get()
                     wait(0.5)
                 end
             end)
         end
     end,
 })
 
 -- /////////////  FLYING SECTION  /////////////
 
 local FlyingSection = PlayerTab:CreateSection("Flying")
 
 -- /////////////  FLY SCRIPT SETUP  /////////////
 
 local Players = game:GetService("Players")
 local player = Players.LocalPlayer
 local character = player.Character or player.CharacterAdded:Wait()
 local humanoid = character:WaitForChild("Humanoid")
 local torso = character:WaitForChild("Head")
 local flying = false
 local ctrl = {f = 0, b = 0, l = 0, r = 0}
 local flightSpeed = 50 -- Initial flight speed, can be adjusted with slider
 local mouse = player:GetMouse()
 
 -- Function to update flight speed
 local function UpdateFlightSpeed(newSpeed)
     flightSpeed = newSpeed
 end
 
 -- /////////////  FLY FUNCTION WITHOUT MOVEMENT TILT  /////////////
 
 local function Fly()
     local bg = Instance.new("BodyGyro", torso)
     bg.P = 9e4
     bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
 
     local bv = Instance.new("BodyVelocity", torso)
     bv.velocity = Vector3.new(0, 0.1, 0)
     bv.maxForce = Vector3.new(9e9, 9e9, 9e9)
 
     repeat wait()
         player.Character.Humanoid.PlatformStand = true
 
         -- Set fixed velocity based on player controls and flight speed
         bv.velocity = ((workspace.CurrentCamera.CFrame.LookVector * (ctrl.f + ctrl.b)) +
                       ((workspace.CurrentCamera.CFrame * CFrame.new(ctrl.l + ctrl.r, 0, 0).Position) - 
                       workspace.CurrentCamera.CFrame.Position)) * flightSpeed
 
         -- Rotate player to face the direction of the camera
         bg.cframe = workspace.CurrentCamera.CFrame
     until not flying
 
     -- Reset flight settings when stopped
     ctrl = {f = 0, b = 0, l = 0, r = 0}
     bg:Destroy()
     bv:Destroy()
     player.Character.Humanoid.PlatformStand = false
 end
 
 -- /////////////  PLAYER CONTROLS FOR FLY MOVEMENT  /////////////
 
 mouse.KeyDown:Connect(function(key)
     if key:lower() == "w" then ctrl.f = 1
     elseif key:lower() == "s" then ctrl.b = -1
     elseif key:lower() == "a" then ctrl.l = -1
     elseif key:lower() == "d" then ctrl.r = 1
     end
 end)
 
 mouse.KeyUp:Connect(function(key)
     if key:lower() == "w" then ctrl.f = 0
     elseif key:lower() == "s" then ctrl.b = 0
     elseif key:lower() == "a" then ctrl.l = 0
     elseif key:lower() == "d" then ctrl.r = 0
     end
 end)
 
 -- /////////////  FLY TOGGLE BUTTON  /////////////
 
 local FlightToggle = PlayerTab:CreateToggle({
     Name = "Toggle Flight",
     CurrentValue = false,
     Flag = "FlightToggle",
     Callback = function(Value)
         if Value then
             flying = true
             Fly()
         else
             flying = false
         end
     end,
 })
 
 -- /////////////  FLIGHT SPEED SLIDER  /////////////
 
 local FlightSpeedSlider = PlayerTab:CreateSlider({
     Name = "Flight Speed",
     Range = {10, 400},
     Increment = 10,
     Suffix = "Speed",
     CurrentValue = 50,
     Flag = "FlightSpeedSlider",
     Callback = function(Value)
         UpdateFlightSpeed(Value)
     end,
 })
 
 -- /////////////  RESET FLIGHT SPEED BUTTON  /////////////
 
 local ResetFlightSpeedButton = PlayerTab:CreateButton({
     Name = "Reset Flight Speed",
     Callback = function()
         flightSpeed = 50 -- Reset to default flight speed
         FlightSpeedSlider:Set(50) -- Update the slider to match the reset value
     end,
 })
 
 
 
 
 -- ??????????????????????????????????????????????????????????????????????????????
 
 
 
 
 
 
 local BGSI = MainWindow:CreateTab("BGSI", 4483362458)
 local AccessSection = BGSI:CreateSection("Access")
 
local WheelSpinButton = BGSI:CreateButton({
   Name = "Toggle Wheel Spin Visibility",
   Callback = function()
      local wheelSpin = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui:FindFirstChild("WheelSpin")
      if wheelSpin then
         wheelSpin.Visible = not wheelSpin.Visible
      end
   end,
})

local EnchantsButton = BGSI:CreateButton({
   Name = "Toggle Enchants Visibility",
   Callback = function()
      local enchants = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui:FindFirstChild("Enchants")
      if enchants then
         enchants.Visible = not enchants.Visible
      end
   end,
})

 
 
 local AutoFarmSection = BGSI:CreateSection("AutoFarm")
 
 
 local PickupToggle = BGSI:CreateToggle({
    Name = "AutoFarm Pickups",
    CurrentValue = false,
    Flag = "AutoFarmPickups",
    Callback = function(Value)
       _G.collectingPickups = Value
 
       if Value then
          spawn(function()
             local function isUUID(str)
                local pattern = "^%x%x%x%x%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%x%x%x%x%x%x%x%x$"
                return type(str) == "string" and string.match(str, pattern) ~= nil
             end
 
             while _G.collectingPickups do
                local success, errorMsg = pcall(function()
                   local chunkerFolders = {}
 
                   -- Collect all streamed-in Chunker folders with UUID children
                   for _, folder in ipairs(workspace:GetDescendants()) do
                      if folder:IsA("Folder") and folder.Name == "Chunker" then
                         for _, child in ipairs(folder:GetChildren()) do
                            if child and isUUID(child.Name) then
                               table.insert(chunkerFolders, folder)
                               break
                            end
                         end
                      end
                   end
                   -- Handle pickups from all active Chunker folders
                   for _, chunker in ipairs(chunkerFolders) do
                      for _, pickup in ipairs(chunker:GetChildren()) do
                         if pickup
                            and isUUID(pickup.Name)
                            and (pickup:IsA("BasePart") or pickup:IsA("Model"))
                            and not pickup:GetAttribute("Handled")
                            and pickup:IsDescendantOf(workspace)
                            and pickup.Parent == chunker then
 
                            pickup:SetAttribute("Handled", true)
 
                            local remotes = game:GetService("ReplicatedStorage"):FindFirstChild("Remotes")
                            if remotes then
                               local pickupsFolder = remotes:FindFirstChild("Pickups")
                               if pickupsFolder then
                                  local collectPickup = pickupsFolder:FindFirstChild("CollectPickup")
                                  if collectPickup then
                                     -- Fire remote to collect
                                     pcall(function()
                                        collectPickup:FireServer(pickup.Name)
                                     end)
 
                                     -- Soft remove the pickup to avoid parent-lock issues
                                     pcall(function()
                                        if pickup:IsDescendantOf(workspace) then
                                           pickup.Parent = nil
                                        end
                                     end)
 
                                     -- Fully destroy after short delay
                                     task.delay(5, function()
                                        if pickup and pickup:GetAttribute("Handled") then
                                           pcall(function()
                                              pickup:Destroy()
                                           end)
                                        end
                                     end)
                                  end
                               end
                            end
                         end
                      end
                   end
                end)
 
                -- Log errors if they occur
                if not success then
                   warn("Error in pickup collection: " .. tostring(errorMsg))
                end
 
                wait(4) -- Reduced loop delay to 4 seconds
             end
          end)
       end
    end,
 })
 
 
 
 
 
 
 local BubbleToggle = BGSI:CreateToggle({
   Name = "AutoFarm Bubbles",
   CurrentValue = false,
   Flag = "AutoFarmBubbles",
   Callback = function(Value)
      -- Set the global variable based on toggle state
      _G.blowingBubbles = Value
 
      -- If enabled, start the bubble blowing script
      if Value then
         spawn(function()
            while _G.blowingBubbles do
               local args = {
                  "BlowBubble"
               }
               game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild("Framework"):WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("Event"):FireServer(unpack(args))
               wait(0.5)
            end
         end)
      end
   end,
 })
 local autoFarmClaimToggle = BGSI:CreateToggle({
   Name = "Auto Claim All",
   CurrentValue = false,
   Flag = "AutoFarmClaim",
   Callback = function(Value)
      -- Set the global variable based on toggle state
      _G.autoFarmingClaim = Value
 
      -- If enabled, start the Auto Claim script
      if Value then
         spawn(function()
            while _G.autoFarmingClaim do
               game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild("Framework"):WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("Event"):FireServer("DoggyJumpWin", 3)
               task.wait(0.5)
	       game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.WorldMap.Visible = true
               game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild("Framework"):WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("Event"):FireServer("ClaimChest", "Giant Chest", true)
               game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild("Framework"):WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("Event"):FireServer("ClaimChest", "Void Chest", true)
               game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.WorldMap.Visible = false
	       task.wait(0.5)
               game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild("Framework"):WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("Event"):FireServer("ClaimFreeWheelSpin")
               task.wait(0.5)
               for i = 1, 9 do
                  game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild("Framework"):WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("Function"):InvokeServer("ClaimPlaytime", i)
                  task.wait(0.5)
               end

               wait(10)
            end
         end)
      end
   end,
 })

local Chunker = require(game:GetService("ReplicatedStorage").Shared.Utils.Chunker)

-- Store original Update function to restore if needed
local OriginalUpdate = Chunker.Update

-- Store the original Update function before any modifications
local OriginalUpdate = Chunker.Update 

local forciblyLoadedChunks = {}

local RenderToggle = BGSI:CreateToggle({ 
    Name = "Render Entire Map (For AutoFarm **LAG**)", 
    CurrentValue = false,
    Flag = "RenderEntireMapToggle",
    Callback = function(Value)
        if Value then
            -- Override Chunker.Update to render all chunks
            function Chunker:Update(position)
                for coord, chunk in pairs(self._chunks) do
                    if not self._loaded[coord] then
                        for _, item in ipairs(chunk) do
                            if typeof(item) == "Instance" then
                                item.Parent = self._folder
                            end
                            self.Loaded:Fire(item, coord)
                        end
                        self._loaded[coord] = true
                        -- Track chunks we forcibly loaded
                        table.insert(forciblyLoadedChunks, coord)
                    end
                end
            end
        else
            -- Restore the original Update function
            Chunker.Update = OriginalUpdate
            
            -- Clean up chunks that wouldn't normally be loaded
            for _, coord in ipairs(forciblyLoadedChunks) do
                local chunk = self._chunks[coord]
                if chunk and self._loaded[coord] then
                    for _, item in ipairs(chunk) do
                        if typeof(item) == "Instance" then
                            item.Parent = nil
                        end
                        self.Unloaded:Fire(item, coord)
                    end
                    self._loaded[coord] = false
                end
            end
            
            -- Clear the forcibly loaded chunks list
            forciblyLoadedChunks = {}
            
            -- Force a normal update to refresh what should actually be shown
            Chunker:Update(position or Vector3.new(0, 0, 0))
        end
    end,
})
-- Generated with sigma spy BOIIIIIIIII (+9999999 AURA)
-- Running Parser version 1.0.9

-- Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Constants
local AlienShopLoopInterval = 5 * 60 -- 16 minutes in seconds
local AlienShopFireDelay = 0.5 -- 0.5 seconds between each FireServer call

-- State
local AlienShopIsRunning = false

-- Functions
local function StartAlienShopLoop()
    task.spawn(function()
        while AlienShopIsRunning do
            for alienItemId = 1, 3 do
                for fireCount = 1, 20 do
                    if not AlienShopIsRunning then
                        return -- Exit immediately if toggle is off
                    end
                    ReplicatedStorage.Shared.Framework.Network.Remote.Event:FireServer(
                        "BuyShopItem",
                        "alien-shop",
                        alienItemId
                    )
                    task.wait(AlienShopFireDelay)
                end
            end
            task.wait(AlienShopLoopInterval)
        end
    end)
end

-- UI
local AlienShopToggle = BGSI:CreateToggle({ 
    Name = "Auto Buy Alien Shop",
    CurrentValue = false,
    Flag = "AutoBuyAlienShop",
    Callback = function(isToggled)
        AlienShopIsRunning = isToggled
        if AlienShopIsRunning then
            StartAlienShopLoop()
        end
    end,
})

 
local InfoSection = BGSI:CreateSection("Information")

local RiftParagraph = BGSI:CreateParagraph({
    Title = "Rifts Info",
    Content = "⏳ Loading Rift Info..."
})

local function getRiftsInfo()
    local eggEntries = {}
    local otherEntries = {}

    local function formatEggName(name)
        name = name:gsub("[-_]egg$", "")
        name = name:gsub("^%l", string.upper)
        return name .. " Egg"
    end

    local function sortByYPosition(a, b)
        return a.YPosition < b.YPosition
    end

    local rendered = workspace:FindFirstChild("Rendered")
    if not rendered then return "❌ 'Rendered' folder not found." end

    local riftFolder = rendered:FindFirstChild("Rifts")
    if not riftFolder then return "❌ 'Rifts' folder not found." end

    for _, child in ipairs(riftFolder:GetChildren()) do
        local originalName = child.Name
        local displayName = originalName
        local yPosition = 0
        pcall(function()
            yPosition = math.floor(child.WorldPivot.Position.Y)
        end)

        if originalName:lower() == "event-2" then
            displayName = "pastel-egg"
        elseif originalName:lower() == "event-1" then
            displayName = "bunny-egg"
        elseif originalName:lower() == "event-3" then
            displayName = "throwback-egg"
        end

        if displayName:lower():sub(-4) == "-egg" then
            local multiplier = "N/A"
            local duration = "N/A"

            pcall(function()
                local luckText = child:FindFirstChild("Display", true)
                    and child.Display:FindFirstChild("SurfaceGui", true)
                    and child.Display.SurfaceGui:FindFirstChild("Icon", true)
                    and child.Display.SurfaceGui.Icon:FindFirstChild("Luck")
                if luckText and luckText.Text then
                    multiplier = luckText.Text
                end
            end)

            pcall(function()
                local timerText = child:FindFirstChild("Display", true)
                    and child.Display:FindFirstChild("SurfaceGui", true)
                    and child.Display.SurfaceGui:FindFirstChild("Timer")
                if timerText and timerText.Text then
                    duration = timerText.Text
                end
            end)

            table.insert(eggEntries, {
                Name = formatEggName(displayName),
                YPosition = yPosition,
                Multiplier = multiplier,
                Duration = duration
            })
        else
            table.insert(otherEntries, {
                Name = displayName,
                YPosition = yPosition
            })
        end
    end

    table.sort(eggEntries, sortByYPosition)
    table.sort(otherEntries, sortByYPosition)

    local lines = {}
    table.insert(lines, "🥚 Eggs")
    for _, entry in ipairs(eggEntries) do
        table.insert(lines, string.format("%s %s | Y = %d | Duration: %s", entry.Multiplier, entry.Name, entry.YPosition, entry.Duration))
    end

    table.insert(lines, "\n-------------------------\n")
    table.insert(lines, "📦 Other")
    for _, entry in ipairs(otherEntries) do
        table.insert(lines, string.format("%s | Y = %d", entry.Name, entry.YPosition))
    end

    table.insert(lines, "\n-------------------------\n")
    return table.concat(lines, "\n")
end

-- Auto-updating loop
task.spawn(function()
    print("✅ Rifts Loop Started")
    while true do
        local success, result = pcall(getRiftsInfo)
        if success then
            RiftParagraph:Set({
                Title = "Rifts Info",
                Content = result
            })
        else
            RiftParagraph:Set({
                Title = "Rifts Info",
                Content = "❌ Error updating rift info: " .. tostring(result)
            })
        end
        task.wait(5)
    end
end)
local WebHookSection = BGSI:CreateSection("Webhook")
local WebhookEnabled = false
local WebhookURL = ""
local DiscordUserTag = ""

-- UI: Webhook URL Input
local WebhookInput = BGSI:CreateInput({
   Name = "Webhook URL",
   CurrentValue = "",
   PlaceholderText = "Enter Discord Webhook URL",
   RemoveTextAfterFocusLost = false,
   Flag = "Input_WebhookURL",
   Callback = function(Text)
       WebhookURL = Text
   end,
})

-- UI: Discord User ID Input
local DiscordTagInput = BGSI:CreateInput({
   Name = "Discord User ID",
   CurrentValue = "",
   PlaceholderText = "Enter Discord User ID (e.g., 1073395...)",
   RemoveTextAfterFocusLost = false,
   Flag = "Input_DiscordID",
   Callback = function(Text)
       DiscordUserTag = "<@" .. Text .. ">"
   end,
})

-- UI: Webhook Toggle
local WebhookToggle = BGSI:CreateToggle({
   Name = "Enable Webhook",
   CurrentValue = false,
   Flag = "Toggle_EnableWebhook",
   Callback = function(Value)
       WebhookEnabled = Value
   end,
})

-- Script Dependencies
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")

-- Get HTTP request function based on executor
local requestFunc =
    (syn and syn.request)
    or (http and http.request)
    or (http_request)
    or (request)
    or (fluxus and fluxus.request)
    or (krnl and krnl.request)
if not requestFunc then
    error("No supported HTTP request function found in this executor.")
end

-- Pet data from the game
local petData = require(ReplicatedStorage.Shared.Data.Pets)

-- Rarity settings for Discord embed
local RARITY_SETTINGS = {
    Common = { color = 11842740, emoji = "⚪", title_format = "Common %s" },
    Unique = { color = 2067276, emoji = "🟢", title_format = "Unique %s" },
    Rare = { color = 2123412, emoji = "🔵", title_format = "Rare %s" },
    Epic = { color = 10181046, emoji = "🟣", title_format = "Epic %s" },
    Legendary = { color = 15844367, emoji = "🟡", title_format = "Legendary %s" },
    Secret = { color = 15158332, emoji = "🔴", title_format = "**SECRET %s**" }
}

local function getFormattedTimestamp()
    local now = DateTime.now()
    local localTime = now:ToLocalTime()
    local hour = localTime.Hour
    local ampm = "AM"
    if hour >= 12 then
        ampm = "PM"
        if hour > 12 then hour = hour - 12 end
    elseif hour == 0 then hour = 12 end

    local function pad(n) return n < 10 and "0" .. n or tostring(n) end
    return string.format("%s/%s/%s at %d:%s %s", pad(localTime.Month), pad(localTime.Day), localTime.Year, hour, pad(localTime.Minute), ampm)
end

local function isHatchEggCall(method, data)
    return method == "HatchEgg" and type(data) == "table" and type(data.Pets) == "table"
end

local function formatPetName(pet)
    local prefix = ""
    if pet.Mythic then prefix = prefix .. "**Mythic** " end
    if pet.Shiny then prefix = prefix .. "**Shiny** " end
    return prefix .. pet.Name
end

local function getPetRarity(petName)
    return petData[petName] and petData[petName].Rarity or "Common"
end

local function getPetTag(petName)
    return petData[petName] and petData[petName].Tag or nil
end

local function sendToWebhook(pet, isNew)
    if not WebhookEnabled or WebhookURL == "" then return end

    local petName = pet.Name
    local petFormattedName = formatPetName(pet)
    local rarity = getPetRarity(petName)
    local tag = getPetTag(petName)
    local rarityConfig = RARITY_SETTINGS[rarity] or RARITY_SETTINGS.Common

    local footer = { text = "Hatched on " .. getFormattedTimestamp() }
    if tag then footer.text = tag .. " • " .. footer.text end

    local embed = {
        title = string.format(rarityConfig.emoji .. " " .. rarityConfig.title_format, petFormattedName),
        color = rarityConfig.color,
        footer = footer
    }

    local payload = {
        content = isNew and DiscordUserTag .. " **NEW PET DISCOVERED!**" or "",
        embeds = {embed}
    }

    requestFunc({
        Url = WebhookURL,
        Method = "POST",
        Headers = { ["Content-Type"] = "application/json" },
        Body = HttpService:JSONEncode(payload)
    })
end

local function handleHatchedPets(pets)
    for _, petEntry in ipairs(pets) do
        if type(petEntry) == "table" and petEntry.Deleted == false then
            local pet = petEntry.Pet
            if pet and type(pet.Name) == "string" then
                sendToWebhook(pet, petEntry.New)
                task.wait(0.1)
            end
        end
    end
end

local function hookRemote(remote)
    remote.OnClientEvent:Connect(function(...)
        local args = {...}
        if isHatchEggCall(args[1], args[2]) then
            handleHatchedPets(args[2].Pets)
        end
    end)
end

for _, obj in pairs(ReplicatedStorage:GetDescendants()) do
    if obj:IsA("RemoteEvent") then
        hookRemote(obj)
    end
end

--/////////////////////////////////////////////////////////////////////////////////////////
--/////////////////////////////////////////////////////////////////////////////////////////
--/////////////////////////////////////////////////////////////////////////////////////////
--//////////////////////////MISC///////////////////////////////////////////////////////////
--/////////////////////////////////////////////////////////////////////////////////////////
--/////////////////////////////////////////////////////////////////////////////////////////
--/////////////////////////////////////////////////////////////////////////////////////////
local MiscTab = MainWindow:CreateTab("Misc", 4483362458)
local ThemeSection = MiscTab:CreateSection("Themes")
local Themes = {
    ["Default"] = 'Default',
    ["Amber Glow"] = 'AmberGlow',
    ["Amethyst"] = 'Amethyst',
    ["Bloom"] = 'Bloom',
    ["Dark Blue"] = 'DarkBlue',
    ["Green"] = 'Green',
    ["Light"] = 'Light',
    ["Ocean"] = 'Ocean',
    ["Serenity"] = 'Serenity'
}

local ThemeNames = {}
for name, _ in pairs(Themes) do
    table.insert(ThemeNames, name)
end

table.sort(ThemeNames)

local ThemeDropdown = MiscTab:CreateDropdown({
    Name = "Select Theme",
    Options = ThemeNames,
    CurrentOption = {ThemeNames[1]},
    MultipleOptions = false,
    Flag = "Dropdown_ThemeSelector",
    Callback = function(Options)
        local selectedName = Options[1]
        local themeIdentifier = Themes[selectedName]

        if themeIdentifier and MainWindow then
            local commandString = string.format("MainWindow.ModifyTheme('%s')", themeIdentifier)
            print("Running Command:", commandString)
            MainWindow.ModifyTheme(themeIdentifier)
        else
            warn("Invalid theme selection or MainWindow is nil")
        end
    end,
})

-- Create the TextInput where the position will be displayed
local PositionInput = MiscTab:CreateInput({
    Name = "Position Input",
    CurrentValue = "Click Button to Copy Position",
    PlaceholderText = "Player's Position",
    RemoveTextAfterFocusLost = false,
    Flag = "PositionInput",
    Callback = function(Text)
        -- This is where the input value can be changed, but we are not using this for now.
    end,
})

-- Create the Button to copy the position to the text input
local PositionButton = MiscTab:CreateButton({
    Name = "Copy Position",
    Callback = function()
        -- Get the player's character and position
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        local position = humanoidRootPart.Position

        -- Update the TextInput with the position as a Vector3 (no extra text)
        PositionInput:Set(tostring(position))  -- Outputs as Vector3 (X, Y, Z)
    end,
})












PositionInput:Set("Click Button Under")
Rayfield:LoadConfiguration()
autoFarmClaimToggle:Set(true)
WebhookToggle:Set(true)
PickupToggle:Set(false)
BubbleToggle:Set(false)
RenderToggle:Set(false)
